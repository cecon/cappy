<?xml version="1.0" encoding="UTF-8"?>
<cappy:script 
  xmlns:cappy="https://schemas.cappy.dev" 
  name="knowstack" 
  version="2.0"
  id="ai-instructions-integration"
  category="documentation"
  priority="normal">

  <context discovery_timestamp="2025-09-19T10:00:00Z">
    <description>
      1. Generate or update AI coding agent instructions within .cappy/stack.md for immediate productivity.
      2. Leverages existing stack knowledge to create project-specific AI guidance that focuses on non-obvious patterns, critical workflows, and unique architectural decisions.      
      3. Toda pergunta feita ao dev no chat deve ser no padrão pergunta a pergunta, nunca uma lista de perguntas.
      4. Não desenvolver ou editar arquivos exceto o stack.md
    </description>

    <keywords>
      <keyword>ai-agent-instructions</keyword>
      <keyword>stack-documentation</keyword>
      <keyword>cappy:knowstack</keyword>
      <keyword>context-orchestration</keyword>
      <keyword>codebase-analysis</keyword>
      <keyword>development-workflows</keyword>
      <keyword>project-conventions</keyword>
    </keywords>

    <docs_refs>
      <doc path=".cappy/stack.md" relevance="critical">Primary stack knowledge base to enhance with
        AI instructions</doc>
      <doc path=".cappy/index/context.json" relevance="high">Context indices for component mapping</doc>
      <doc path="README.md" relevance="medium">Project overview for AI context</doc>
    </docs_refs>

    <prevention_rules>
      <rule id="no-generic-advice" category="documentation" severity="high" auto_apply="true">
        Avoid generic AI coding advice - focus only on THIS project's specific patterns and
        workflows
      </rule>
      <rule id="preserve-stack-content" category="documentation" severity="critical"
        auto_apply="true">
        Preserve all existing stack.md content when integrating AI instructions
      </rule>
      <rule id="actionable-instructions" category="documentation" severity="medium"
        auto_apply="true">
        Ensure AI instructions are immediately actionable with concrete examples
      </rule>
    </prevention_rules>

    <dependencies>
      <dependency type="other" critical="true">Existing .cappy/stack.md file with project context</dependency>
      <dependency type="other" critical="false">Context indices in .cappy/index/</dependency>
      <dependency type="other" critical="false">Existing AI instruction files for content merge</dependency>
    </dependencies>
  </context>

  <execution estimated_duration="PT30M">

    <step id="validate-stack-availability"
      validation="Confirm .cappy/stack.md exists and context indices are available"
      atomic="true"
      estimated_time="PT2M">
      <description>
        Ensure stack.md exists and is ready for AI instructions integration
      </description>
      <substep id="check-stack-file"
        validation="File .cappy/stack.md exists and is readable"
        atomic="true">
        <description>Verify .cappy/stack.md exists and load existing content</description>
        <action type="verify_output"
          expected_result="stack.md file exists and contains project context"
          file_path=".cappy/stack.md"
          verification="File contains sections like tech stack, architecture, etc.">
          Check if .cappy/stack.md exists - if missing, suggest running 'knowstack' first
        </action>
      </substep>
      <substep id="load-context-indices"
        validation="Context indices loaded successfully"
        atomic="true"
        depends_on="check-stack-file">
        <description>Load context indices for instruction generation</description>
        <action type="verify_output"
          expected_result="Context indices contain component mapping and task categories"
          file_path=".cappy/index/context.json"
          verification="JSON structure contains component_categories and semantic_keywords">
          Load .cappy/index/context.json for component mapping and task categories
        </action>
      </substep>
    </step>

    <step id="discover-existing-ai-instructions"
      validation="All existing AI instruction files identified and analyzed"
      atomic="true"
      depends_on="validate-stack-availability"
      estimated_time="PT3M">
      <description>
        Find and analyze existing AI instruction files across common locations
      </description>
      <substep id="search-ai-files" validation="All AI instruction file patterns searched" required="false">
        <description>Search for existing AI instruction files using glob patterns</description>
        <action type="run_command"
          expected_result="List of existing AI instruction files found"
          command="find . -name '.cursorrules' -o -name '.windsurfrules' -o -name 'AGENT.md' -o -name 'AGENTS.md' -o -name 'CLAUDE.md'"
          verification="Command returns paths to existing AI instruction files">
          Search for existing AI instruction files in standard locations
        </action>
      </substep>
      <substep id="analyze-existing-content"
        validation="Existing content categorized and valuable sections identified"
        atomic="true"
        depends_on="search-ai-files">
        <description>Parse and categorize existing AI instruction content</description>
        <action type="verify_output"
          expected_result="Existing content parsed into categories: architecture, workflows, conventions"
          verification="Content analysis identifies sections to preserve vs update">
          Parse existing AI instructions to identify valuable content to preserve
        </action>
      </substep>
    </step>

    <step id="analyze-codebase-architecture"
      validation="Project architecture insights extracted from stack context"
      atomic="true"
      depends_on="discover-existing-ai-instructions"
      estimated_time="PT5M">
      <description>
        Discover essential architectural knowledge from existing stack context
      </description>
      <substep id="extract-architecture-insights"
        validation="Major components and service boundaries identified"
        atomic="true">
        <description>Extract big picture architecture from stack.md</description>
        <action type="verify_output"
          expected_result="Architecture insights include major components, data flows, and structural decisions"
          file_path=".cappy/stack.md"
          verification="Insights focus on multi-file understanding requirements">
          Analyze stack.md to identify major components, service boundaries, and architectural
          decisions
        </action>
      </substep>
      <substep id="map-component-relationships"
        validation="Cross-component relationships and integration points mapped"
        atomic="true"
        depends_on="extract-architecture-insights">
        <description>Identify integration points and cross-component communication</description>
        <action type="verify_output"
          expected_result="Component relationship map shows integration points and communication patterns"
          verification="Map includes service boundaries, data persistence, and auth flows">
          Use context indices to map component relationships and integration patterns
        </action>
      </substep>
    </step>

    <step id="extract-developer-workflows"
      validation="Critical development workflows documented with non-obvious commands"
      atomic="true"
      depends_on="analyze-codebase-architecture"
      estimated_time="PT4M">
      <description>
        Document critical development workflows specific to this project
      </description>
      <substep id="analyze-build-patterns"
        validation="Build, test, and deployment workflows identified"
        atomic="true">
        <description>Extract build and deployment patterns from stack context</description>
        <action type="verify_output"
          expected_result="Build patterns include commands, scripts, and testing strategies"
          verification="Patterns focus on non-obvious workflow commands">
          Analyze stack.md for build commands, test execution, and debugging approaches
        </action>
      </substep>
      <substep id="document-environment-setup"
        validation="Development environment requirements and gotchas documented"
        atomic="true"
        depends_on="analyze-build-patterns">
        <description>Document development environment setup requirements</description>
        <action type="verify_output"
          expected_result="Environment setup includes required variables, service dependencies, and common gotchas"
          verification="Documentation covers non-obvious setup requirements">
          Document environment variables, service startup order, and development gotchas
        </action>
      </substep>
    </step>

    <step id="identify-project-conventions"
      validation="Project-specific patterns that differ from common practices identified"
      atomic="true"
      depends_on="extract-developer-workflows"
      estimated_time="PT4M">
      <description>
        Extract project-specific patterns that differ from common practices
      </description>
      <substep id="analyze-coding-standards"
        validation="Project-specific coding standards and conventions extracted"
        atomic="true">
        <description>Extract coding standards and naming conventions from stack</description>
        <action type="verify_output"
          expected_result="Coding standards include naming conventions, directory patterns, and error handling"
          verification="Standards focus on project-specific approaches vs common practices">
          Analyze stack.md for naming conventions, directory structure patterns, and error handling
          approaches
        </action>
      </substep>
      <substep id="identify-unique-patterns"
        validation="Custom abstractions and domain-specific patterns documented"
        atomic="true"
        depends_on="analyze-coding-standards">
        <description>Identify unique architectural decisions and patterns</description>
        <action type="verify_output"
          expected_result="Unique patterns include custom abstractions, API design, and integration approaches"
          verification="Patterns highlight what makes this project different">
          Extract custom abstractions, domain-specific patterns, and integration-specific
          conventions
        </action>
      </substep>
    </step>

    <step id="generate-ai-instructions-section"
      validation="AI instructions section created with project-specific guidance"
      atomic="false"
      depends_on="identify-project-conventions"
      estimated_time="PT8M">
      <description>
        Create comprehensive AI agent instructions section for stack.md integration
      </description>
      <substep id="structure-ai-content"
        validation="AI instructions structured as markdown section"
        atomic="true">
        <description>Structure AI instructions as integrated markdown section</description>
        <action type="create_file"
          expected_result="AI instructions section structured with architecture, workflows, and conventions"
          verification="Content focuses on actionable, project-specific guidance">
          Generate AI instructions section with architecture understanding, workflows, and
          conventions
        </action>
      </substep>
      <substep id="add-reference-examples"
        validation="Concrete code examples and file references included"
        atomic="true"
        depends_on="structure-ai-content">
        <description>Add concrete examples and key file references</description>
        <action type="edit_file"
          expected_result="AI instructions include specific code examples and file references"
          verification="Examples are drawn from actual codebase patterns">
          Include concrete code examples and references to key files that exemplify patterns
        </action>
      </substep>
    </step>

    <step id="clarify-with-developer"
      validation="Dúvidas críticas resolvidas com o desenvolvedor"
      atomic="true">
      <description>If critical information is missing, generate direct questions for the developer, always in a step-by-step format.</description>
    </step>

    <step id="integrate-with-stack-md"
      validation="AI instructions seamlessly integrated into existing stack.md"
      atomic="false"
      depends_on="generate-ai-instructions-section"
      estimated_time="PT4M">
      <description>
        Integrate AI instructions into existing stack.md while preserving all content
      </description>
      <substep id="parse-stack-structure"
        validation="Existing stack.md structure identified and insertion point determined"
        atomic="true">
        <description>Parse existing stack.md structure for integration</description>
        <action type="verify_output"
          expected_result="Stack structure parsed with sections identified and insertion point determined"
          file_path=".cappy/stack.md"
          verification="Integration point identified that maintains document flow">
          Parse existing stack.md to identify sections and determine optimal insertion point
        </action>
      </substep>
      <substep id="merge-ai-instructions"
        validation="AI instructions integrated without losing existing content"
        atomic="true"
        depends_on="parse-stack-structure">
        <description>Merge AI instructions with existing stack content</description>
        <action type="edit_file"
          expected_result="Stack.md contains integrated AI instructions section"
          file_path=".cappy/stack.md"
          verification="All existing content preserved and AI section flows naturally">
          Integrate AI instructions into stack.md while preserving all existing content
        </action>
      </substep>
    </step>

  </execution>

  <completion>
    <validation_checklist>
      <item critical="true">AI instructions integrated into .cappy/stack.md</item>
      <item critical="true">All existing stack.md content preserved</item>
      <item critical="false">AI instructions focus on project-specific patterns</item>
      <item critical="false">Concrete code examples included from actual codebase</item>
      <item critical="false">Non-obvious workflows and commands documented</item>
      <item critical="false">Integration patterns and architectural decisions explained</item>
      <item critical="false">Context indices updated with AI instruction metadata</item>
    </validation_checklist>

    <knowledge_capture>
      <new_learnings>
        <learning>AI instructions are most effective when integrated into existing project knowledge
          rather than separate files</learning>
        <learning>Project-specific patterns and non-obvious workflows provide the most value for AI
          agents</learning>
        <learning>Stack.md serves as unified knowledge base for both humans and AI agents</learning>
      </new_learnings>

      <docs_updated>
        <doc>.cappy/stack.md</doc>
        <doc>.cappy/index/context.json</doc>
      </docs_updated>

      <new_prevention_rules>
        <rule category="documentation" severity="medium">
          Always validate that AI instructions are actionable and specific to the project before
          integration
        </rule>
        <rule category="documentation" severity="high">
          Preserve existing documentation structure when adding new sections to avoid knowledge
          fragmentation
        </rule>
      </new_prevention_rules>
    </knowledge_capture>

    <metrics>
      <metric name="architecture_components_documented" value="0" unit="components"
        category="analysis" />
      <metric name="workflows_captured" value="0" unit="workflows" category="documentation" />
      <metric name="conventions_identified" value="0" unit="patterns" category="analysis" />
      <metric name="integration_time" value="0" unit="minutes" category="performance" />
    </metrics>
  </completion>

</cappy:script>