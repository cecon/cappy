<?xml version="1.0" encoding="UTF-8"?>
<cappy:script xmlns:cappy="https://schemas.cappy.dev" name="newtask" version="1.9">
  <about>
    <summary>Criar nova task atômica (≤3h) – fluxo scope-first.</summary>
    <command>#newtask</command>
    <notes>
      <note>LLM só preenche XML; criação física é via comandos VS Code.</note>
      <note>Não deve iniciar o desenvolvimento.</note>
      <note>Requer .cappy/stack.md validado.</note>
      <note>Fazer perguntas sempre no formato 1 a 1.</note>
    </notes>
  </about>

  <steps>
    <step id="1">
      <goal>Vamos verificar se temos o arquivo da stack.md em .cappy/</goal>
      <logic>
        1 - Verificar se o arquivo .cappy/stack.md existe
          1.1 - Se não existir, alertar o usuário e não prosseguir
          1.2 - Se existir, verifique que não está vazio
            1.2.1 - Se estiver vazio, alertar o usuário e não prosseguir
            1.2.2 - Se não estiver vazio, continuar o fluxo normalmente                
      </logic>
    </step>
    <step id="2">
      <goal>Abortar se houver uma task ativa ou não pausada.</goal>
      <logic>
        1 - Verificar se existe na pasta .cappy/tasks/ algum arquivo com o nome terminado em *.ACTIVE.xml        
          1.1 - Se existir então alerte o usuário de que existe uma task em andamento e que você não poderá prosseguir
          1.2 - Caso contrario: continuar o fluxo normalmente.
      </logic>
    </step>
    <step id="3">
      <goal>Ler as informações da STACK.md.</goal>
      <logic>
        1 - Leia o arquivo completo .cappy/stack.md
        2 - Extraia as informações relevantes para a nova task
        3 - Se for uma stack multi projetos pergunte em qual projeto a nova task se encaixa
        4 - Se tiver alguma duvida sobre a stack pergunte ao usuário no formato 1 a 1 até não restar duvidas
          4.1 - Se seguiu por esse caminho então lembre-se de atualizar o arquivo da stack.md para não ter que perguntar novamente
        5 - Se tudo estiver correto, prosseguir para o próximo passo
      </logic>
    </step>

    <step id="3">
      <goal>Coletar escopo</goal>
      <logic>
        1 - Sempre em um padrão de perguntas 1 a 1
        2 - Ler os dados da .cappy/Stack.md
        3 - Coletar informações de escopo de forma clara e objetiva
        4 - Investigue onde a task se encaixa no contexto geral do projeto como pastas, arquivos, subprojetos etc.
        5 - Garantir que todas as informações necessárias sejam coletadas antes de prosseguir
        6 - Criticar a task pois você é um analista de sistemas especialista
        7 - Garantir que não há subjetividades
        8 - Aplicar gate de tempo (≤3h) com base nas informações coletadas
        9 - Confirmar se o escopo está atômico (≤3h) antes de prosseguir
          9.1 - Se o escopo não estiver atômico, sugerir decomposição
          9.2 - Se o escopo estiver atômico, prosseguir
        10 - Se tudo estiver correto, prosseguir para o próximo passo
      </logic>
    </step>

    <step id="4">
      <goal>Gerar *.ACTIVE.xml e obter caminho/id.</goal>
      <logic><![CDATA[
        run_vscode("cappy.createTaskFile", {
          title, description: scope, area, estimate: estimate + "h",
          priority: extract_kv(cfg, ["defaults.priority"], "P2")
        });
        out = read_text(".cappy/output.txt");
        outpath = extract(out, "<file-path>", "</file-path>");
        task_id = extract(out, "<id>", "</id>");
        if (!outpath) stop_with_message("ERR:createTaskFile sem <file-path>.");
      ]]></logic>
      <output>task_id,outpath</output>
    </step>

    <step id="5">
      <goal>Preencher campos essenciais e marcar status=prepared.</goal>
      <logic><![CDATA[
        xml = read_text(outpath);
        xml = ensure_task_header(xml, task_id, "prepared");
        xml = upsert_tag(xml, "title", xml_escape(title));
        xml = ensure_meta(xml, { updatedAt: now_iso(), estimate: estimate + "h" });
        xml = upsert_block(xml, "goals", `<goal>${xml_escape(scope)}</goal>`);
        xml = upsert_block(xml, "constraints", `<constraint>Não alterar fora de ${xml_escape(paths)}</constraint>`);
        xml = upsert_block(xml, "steps",
          `<steps current="1">
             <step id="1" required="true" status="pending">
               <desc>Primeiro resultado concreto.</desc>
               <inputs>${xml_escape(deps)}</inputs>
               <doneWhen>${xml_escape(acceptance)}</doneWhen>
               <validation>${xml_escape(validation)}</validation>
               <evidence></evidence>
             </step>
           </steps>`);
        write_file(outpath, xml);
        say(`OK:Task preparada\nid=${task_id}\nfile=${outpath}\nHINT: cappy:taskstatus para iniciar`);
      ]]></logic>
    </step>
  </steps>
</cappy:script>
