<?xml version="1.0" encoding="UTF-8"?>
<script
  id="" name="newtask-script-expanded"
  category="documentation"
  priority="high"
  created="{NOW}">

  <context discovery_timestamp="{NOW}">          
    <description>
      1. Criar um plano para cada passo e seguir ele a risca.
      2. Script detalhado do comando cappy:new. Para orientar a criação do arquivo da tasks.
      3. Esse script apenas gera o arquivo XML da task, não deve executar a task.                  
    </description>        
    <prevention_rules>
      <rule id="" name="allow-exceed-steps" category="documentation" severity="high"
        auto_apply="true"> Esta task é um roteiro de instrução e pode ultrapassar 5 passos. <note>Certifique-se
        de
          documentar qualquer passo adicional.</note>
      </rule>
    </prevention_rules>
    <dependencies>
      <dependency type="tool">VS Code</dependency>      
    </dependencies>
  </context>

  <execution estimated_duration="PT90M">

    <step id="1" name="validate-stack"
      validation="Confirma que .cappy/stack.md existe e não está vazio."
      status="pending" atomic="true" estimated_time="PT10M">
      <description>
        1. Validar através das substeps se o arquivo .cappy/stack.md existe e não está vazio.
      </description>
      <substep id="1" name="s1.1" validation="Mensagem exibida no chat">
        <description>
          1. Se for vazio ou não existir, abortar e sugerir comando cappy.knowstack para criar o
          arquivo.
          1.1 Explicar que o arquivo é crucial para entender o contexto do projeto.
          1.2 Sugerir que o usuário preencha o arquivo com informações relevantes.
          1.3 abortar a execução do script.
          2. Se existir e não estiver vazio, prosseguir para o próximo passo.
        </description>
      </substep>
    </step>

    <step id="2" name="check-active-tasks"
      validation="Tarefa ativa verificada"
      status="pending" atomic="true" estimated_time="PT1M">
      <description>
        1. Garantir que não há tasks ativas.
        2. Siga as substeps para validar o status.
      </description>
      <substep id="1" name="s2.1" validation="resultado lido do output.txt">
        <description>
          Execute the VS Code extension command `cappy.getActiveTask` programmatically
          (using vscode.commands.executeCommand), then read the file `.cappy/output.txt`.
        </description>
      </substep>
      <substep id="2" name="s2.2"
        validation="
        1. Análise realizada; 
        1.1 Se task ativa
        1.1.1 Status e sugestão de conclusão fornecidos
        1.2 Se não houver task ativa
        1.2.1 Prosseguir com a criação da nova task">
        <description>Análisar resultado e verificar se tem ou não task ativa</description>
      </substep>
    </step>

    <step id="3" name="create-task-file-template"
      validation="Arquivo template criado"
      status="pending" atomic="true" estimated_time="PT1M">
      <description>
        Execute the VS Code extension command `cappy.createTaskFile` programmatically
        (using vscode.commands.executeCommand), then read the file `.cappy/output.txt`.
      </description>
    </step>

    <step id="4" name="update-task-file-template-root"
      validation="Arquivo template atualizado com novos atributos no root element">
      <description>
        Atualizar o arquivo template criado com novos atributos no root element.
        1. id: adicionar o id unico da task.
        2. category: deixar em branco pq ainda não temos a categoria.
        3. priority: perguntar para o usuario qual a prioridade (low, medium, high).
        4. status: "preparing" porque ainda não está em andamento.
        5. created: colocar data e hora atual.
      </description>
    </step>

    <step id="5" name="update-task-file-template-context"
      validation="Arquivo template atualizado com conteúdo de contexto">
      <description>
        1. Se o usuário não informou um contexto no momento de solicitar a criação da task
        solicitar.
        2. Atualizar o arquivo template criado com conteúdo de contexto.
        3. Clarificar o texto se necessário com perguntas no formato pergunta a pergunta.
      </description>
      <substep id="1" name="keywords-extraction" validation="keywords extraidos">
        <description>Extrair keywords da descrição da task</description>
      </substep>
      <substep id="2" name="relevant-documents-extraction"
        validation="documentos relevantes e keywords extraidos">
        <description>
          1. Ler se disponível os arquivo .cappy/indexes/docs.json, .cappy/indexes/tasks.json,
          .cappy/indexes/rules.json.
          1.1 Se os arquivos não existirem, continue para o proximo passo.
          1.2 Se os arquivos existirem, ler o conteúdo e extrair informações relevantes.
          1.2.1 Preencher a seção docs e keywords do contexto com os documentos relevantes.
          1.3 Atualizar o atributto categoria da task pois nesse ponto já temos keywords.
        </description>
      </substep>
    </step>

    <step id="6" name="scope-validation"
      validation="Escopo analisado para atomicidade; subjetividade verificada; critérios de validação definidos; estimativa de tempo aplicada">
      <description>
        Validar escopo atômico com análise expert.
      </description>
      <substep id="1" name="s6.1"
        validation="Análise de escopo para atomicidade (≤5 steps principais)">
        <description>
          1. Dividir escopo em steps realizaveis.
          2. Verificar se vai precisar de mais de 5 passos.
          2.1 Quando tiver mais de 5 passos, dividir em passos e subpassos.
          2.1.1 Quando mesmo assim não for possível, sugerir ao usuário diminuir o escopo.
        </description>
      </substep>
      <substep id="2" name="s6.2" validation="Verificação de subjetividade e ambiguidade">
        <description>
          1. Reformular escopo para clareza quando necessário.
          1.1 Sempre consultando o usuario com perguntas no padrão pergunta a pergunta.
          1.1.2 Quando possível gere alternativas para reduzir erros na interpretação do usuário.
        </description>
      </substep>
      <substep id="3" name="s6.3" validation="Critérios de validação claros definidos">
        <description>
          1. Definir critérios de validação claros para cada step.
        </description>
      </substep>
      <substep id="4" name="s6.4" validation="Estimativa de tempo baseada em complexidade">
        <description>Aplicar estimativa de tempo para cada step baseado em complexidade</description>
      </substep>
      <substep id="5" name="s6.5" validation="Critérios mensuráveis de conclusão definidos">
        <description>Definir critérios mensuráveis de conclusão para a task</description>
      </substep>
      <substep id="5" name="s6.5" validation="Steps e substeps preenchidos no arquivo da task">
        <description>Preencher as steps e substeps no arquivo da task.</description>
      </substep>
    </step>
    <step id="6" name="task-review"
      validation="Cada passo foi refinado para clareza de como a llm deve proceder; critérios de validação mensuráveis definidos; subjetividade e ambiguidade minimizadas">
      <description>
        1. Ler cada step da task criada e refinar para que uma llm possa compreendê-la facilmente
        sem ambiguidade.
        2. Garantir que cada step tem um objetivo claro e único.
        3. Garantir que cada step tem critérios mensuráveis de validação.
        4. Verificar subjetividade e ambiguidade em cada step.
        5. Se necessário crie substeps.
        6. Atualize o arquivo da task com as melhorias.
      </description>
    </step>

    <step id="7" name="generate-unit-tests"
      validation="Config.yaml verificado; steps de teste gerados; objetivos claros definidos; melhores práticas sugeridas"
      status="pending" atomic="true" estimated_time="PT15M">
      <description>
        1. Gerar testes unitários se habilitado ou se a categoria da task não for de testes.
        1.1 Verificar em .cappy/config.yaml se unit tests estão habilitados.
        2. Criar steps de teste para cada step principal da task.
        3. Definir objetivo claro e critérios mensuráveis para cada teste.
        4. Atualize o arquivo da task com as melhorias.
      </description>
    </step>

    <step id="8" name="generate-documentation"
      validation="Índices consultados; documentação existente verificada; step dedicado criado; critérios de validação definidos"
      status="pending" atomic="true" estimated_time="PT15M">
      <description>
        1. Gerar uma step na task atual para criar ou atualizar documentação exceto se a categoria
        da task for de documentação.
        2. Consultar os índices .cappy/index/ e docs/index/ para verificar se já existe documentação
        relevante.
        3. Determinar se deve atualizar a documentação existente ou criar uma nova.
        4. Criar um step dedicado em execution para a documentação.
        5. Definir critérios de validação claros para a documentação.
        6. Atualize o arquivo da task com as melhorias.
      </description>
    </step>

    <step id="9" name="analyze-mistakes"
      validation="Tipos de erro registrados; causas raiz analisadas; novas prevention rules propostas; índice atualizado"
      status="pending" atomic="true" estimated_time="PT10M">
      <description>
        1. Criar uma step dedicada para analisar erros e propor novas prevention rules.
        2. Analisar erros comuns e intervenções manuais feitas durante a criação da task.
        3. Propor novas prevention rules para evitar esses erros no futuro.
        4. Atualizar o índice de prevention rules com as novas regras propostas.
        5. Atualize a seção execution da task com os steps de teste gerados.
      </description>
    </step>

    <step id="10" name="finalize-task"
      validation="Task XML lida; atributos atualizados; seção completion inicializada; mensagem de sucesso fornecida"
      status="pending" atomic="true" estimated_time="PT10M">
      <description>
        Verificar o arquivo XML da task, atualizar atributos, inicializar seção completion e
        fornecer mensagem de sucesso.
      </description>
      <substep id="1" name="s10.1" validation="Arquivo da task lido e validado">
        <description>Verificar se o arquivo da task foi lido e validado corretamente</description>
      </substep>
      <substep id="2" name="s10.2" validation="Compliance XSD garantido">
        <description>Garantir que a task está em conformidade com o XSD</description>
      </substep>
      <substep id="3" name="s10.3" validation="Atributos da task atualizados">
        <description>Atualizar os atributos da task com as informações mais recentes</description>
      </substep>
      <substep id="4" name="s10.4" validation="Seção completion inicializada">
        <description>Inicializar a seção de completion da task</description>
      </substep>
      <substep id="5" name="s10.5" validation="Mensagem de sucesso com resumo fornecida">
        <description>Fornecer uma mensagem de sucesso com um resumo da task</description>
      </substep>
    </step>

  </execution>

  <completion>
    <validation_checklist>
      <item critical="true">Script preserva lógica do comando cappy:new</item>
      <item critical="true">Exceder limite de 5 steps permitido apenas por ser roteiro</item>
      <item>Saída confirmada em .cappy/output.txt</item>
    </validation_checklist>
    <knowledge_capture>
      <new_learnings>
        <learning>Scripts de instrução podem ter exceções às regras normais</learning>
      </new_learnings>
    </knowledge_capture>
    <metrics>
      <metric name="steps_total" value="10" unit="count" category="execution" />
    </metrics>
  </completion>
</script>