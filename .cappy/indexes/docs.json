{
  "docs": [
    {
      "id": "change-task-status-command",
      "title": "Change Task Status Command",
      "path": "c:\\Projetos\\cappy\\docs\\change-task-status-command.md",
      "content": "# Change Task Status Command\r\n\r\n## Vis√£o Geral\r\n\r\nO comando `cappy.changeTaskStatus` permite alterar o status de uma tarefa entre \"active\" (ativo) e \"paused\" (pausado). O comando renomeia o arquivo da tarefa e atualiza internamente as propriedades de status e ID.\r\n\r\n## Funcionalidades\r\n\r\n### üîÑ Altera√ß√£o de Status\r\n- **Active**: Tarefa em andamento (`status=\"em-andamento\"`)\r\n- **Paused**: Tarefa pausada (`status=\"pausada\"`)\r\n\r\n### üìù Modifica√ß√µes Realizadas\r\n1. **Renomea√ß√£o do arquivo**: \r\n   - `TASK_20250814_exemplo.ACTIVE.xml` ‚Üí `TASK_20250814_exemplo.ACTIVE.xml`\r\n   - `TASK_20250814_exemplo.paused.xml` ‚Üí `TASK_20250814_exemplo.PAUSED.xml`\r\n\r\n2. **Atualiza√ß√£o do XML**:\r\n   - Propriedade `status` no elemento `<task>`\r\n   - Propriedade `id` no elemento `<task>`\r\n   - Timestamp `<updated>` na se√ß√£o `<meta>`\r\n\r\n## Como Usar\r\n\r\n### Via Command Palette\r\n1. Abra o Command Palette (`Ctrl+Shift+P`)\r\n2. Digite \"Cappy: Change Task Status\"\r\n3. Informe o nome do arquivo da tarefa\r\n4. Selecione o ",
      "category": "general",
      "keywords": [
        "task",
        "api",
        "test",
        "id",
        "active",
        "paused",
        "xml",
        "utf",
        "vs",
        "# change task status command",
        "change",
        "status",
        "command"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "chunking-system-spec",
      "title": "Sistema de Chunking Inteligente - SPEC",
      "path": "c:\\Projetos\\cappy\\docs\\chunking-system-spec.md",
      "content": "# Sistema de Chunking Inteligente - SPEC\r\n\r\n> Data: 2025-10-04\r\n> Vers√£o: 1.0\r\n> Status: Implementado\r\n\r\n## Vis√£o Geral\r\n\r\nO sistema de chunking inteligente divide documentos e c√≥digo fonte em chunks sem√¢nticos menores, preservando contexto e facilitando busca vetorial. Cada chunk mant√©m informa√ß√µes de localiza√ß√£o precisas (startLine/endLine) para refer√™ncia direta no c√≥digo fonte.\r\n\r\n## Tipos de Chunking Suportados\r\n\r\n### 1. Markdown (`.md`, `.mdx`)\r\n\r\n**Estrat√©gia**: Chunking por headings (H1-H6)\r\n\r\n**Regras**:\r\n- Cada chunk come√ßa em um heading e inclui todo conte√∫do at√© o pr√≥ximo heading de mesmo n√≠vel ou superior\r\n- Headings de n√≠vel inferior ficam dentro do chunk do heading pai\r\n- Conte√∫do antes do primeiro heading forma um chunk separado\r\n- Preserva hierarquia de headings atrav√©s de metadata\r\n\r\n**Metadados Espec√≠ficos**:\r\n```typescript\r\n{\r\n    headingLevel?: number;     // 1-6 para H1-H6\r\n    symbolName?: string;       // Texto do heading\r\n}\r\n```\r\n\r\n**Exemplo**:\r\n```markdown\r\n# ",
      "category": "auth",
      "keywords": [
        "function",
        "class",
        "method",
        "api",
        "service",
        "spec",
        "iso",
        "id",
        "sha",
        "jwt",
        "ast",
        "ml",
        "# sistema de chunking inteligente - spec",
        "chunking",
        "system"
      ],
      "lastModified": "2025-10-04T03:05:59.806Z",
      "type": "doc"
    },
    {
      "id": "complete-task-command",
      "title": "Complete Task Command",
      "path": "c:\\Projetos\\cappy\\docs\\complete-task-command.md",
      "content": "# Complete Task Command\r\n\r\n## Comando: `cappy.completeTask`\r\n\r\n### Descri√ß√£o\r\nEste comando move uma tarefa ativa (arquivo `.ACTIVE.xml`) para o hist√≥rico, renomeando-a com a extens√£o `.DONE.xml` e atualizando suas refer√™ncias internas.\r\n\r\n### Funcionalidade\r\n\r\n1. **Localiza tarefa ativa**: Busca por arquivos `.ACTIVE.xml` no diret√≥rio `.cappy/tasks/`\r\n2. **Cria diret√≥rio de hist√≥rico**: Se n√£o existir, cria `.cappy/history/`\r\n3. **Renomeia arquivo**: Substitui `.ACTIVE.xml` por `.DONE.xml`\r\n4. **Atualiza conte√∫do**: Modifica refer√™ncias internas no XML:\r\n   - Nome do arquivo\r\n   - Caminhos de arquivo\r\n   - Status da tarefa (para \"concluida\")\r\n   - Adiciona timestamp de conclus√£o\r\n5. **Move para hist√≥rico**: Transfer o arquivo de `tasks/` para `history/`\r\n6. **Remove original**: Deleta o arquivo original do diret√≥rio `tasks/`\r\n\r\n### Exemplo de Uso\r\n\r\n#### Antes da execu√ß√£o:\r\n```\r\n.cappy/\r\n‚îú‚îÄ‚îÄ tasks/\r\n‚îÇ   ‚îî‚îÄ‚îÄ TASK_20250814123456_.ACTIVE.xml\r\n‚îî‚îÄ‚îÄ history/\r\n```\r\n\r\n#### Conte√∫do do arquivo ",
      "category": "testing",
      "keywords": [
        "task",
        "api",
        "test",
        "active",
        "done",
        "xml",
        "utf",
        "vs",
        "llm",
        "# complete task command",
        "complete",
        "command"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "create-task-file-command",
      "title": "Teste do comando createTaskFile",
      "path": "c:\\Projetos\\cappy\\docs\\create-task-file-command.md",
      "content": "# Teste do comando createTaskFile\r\n\r\nEste arquivo demonstra o uso do novo comando `cappy.createTaskFile`.\r\n\r\n## Como usar:\r\n\r\n1. **Comando b√°sico**: `cappy.createTaskFile` - cria tarefa com valores padr√£o\r\n2. **Comando com par√¢metros**: `cappy.createTaskFile` com argumentos:\r\n   - `title`: t√≠tulo da tarefa\r\n   - `description`: descri√ß√£o da tarefa  \r\n   - `area`: √°rea da tarefa\r\n   - `priority`: prioridade (baixa, media, alta)\r\n   - `estimate`: estimativa de tempo\r\n\r\n## Resultado:\r\n\r\n- Arquivo criado em `.cappy/tasks/`\r\n- Formato: `TASK_{yyyyMMddHHmmss}_.ACTIVE.xml`\r\n- Conte√∫do salvo em `.cappy/output.txt`\r\n- Retorna o XML completo da tarefa criada\r\n\r\n## Exemplo de uso via c√≥digo:\r\n\r\n```typescript\r\n// Comando b√°sico\r\nconst result = await vscode.commands.executeCommand('cappy.createTaskFile');\r\n\r\n// Comando com par√¢metros\r\nconst result = await vscode.commands.executeCommand('cappy.createTaskFile', {\r\n  title: 'Implementar nova funcionalidade',\r\n  description: 'Adicionar suporte para uplo",
      "category": "general",
      "keywords": [
        "active",
        "xml",
        "# teste do comando createtaskfile",
        "create",
        "task",
        "file",
        "command"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "cursor-compatibility",
      "title": "Compatibilidade com Cursor",
      "path": "c:\\Projetos\\cappy\\docs\\cursor-compatibility.md",
      "content": "# Compatibilidade com Cursor\r\n\r\n## Vis√£o Geral\r\n\r\nO CAPPY √© totalmente compat√≠vel com o [Cursor](https://cursor.sh/), o editor de c√≥digo com IA integrada. Todas as funcionalidades do CAPPY funcionam perfeitamente no Cursor, aproveitando sua poderosa integra√ß√£o com IA.\r\n\r\n## Instala√ß√£o no Cursor\r\n\r\n### M√©todo 1: Via VSIX (Recomendado)\r\n\r\n1. Baixe o arquivo `.vsix` mais recente da extens√£o\r\n2. No Cursor, abra a paleta de comandos (`Ctrl+Shift+P` ou `Cmd+Shift+P`)\r\n3. Digite \"Extensions: Install from VSIX...\"\r\n4. Selecione o arquivo `.vsix` baixado\r\n\r\n### M√©todo 2: Via Marketplace do VS Code\r\n\r\nComo o Cursor √© compat√≠vel com extens√µes do VS Code, voc√™ pode instalar diretamente:\r\n\r\n```bash\r\n# Via linha de comando\r\ncursor --install-extension eduardocecon.cappy\r\n```\r\n\r\nOu use a interface de extens√µes do Cursor:\r\n1. Abra a aba de extens√µes (√≠cone de blocos ou `Ctrl+Shift+X`)\r\n2. Pesquise por \"Cappy\"\r\n3. Clique em \"Install\"\r\n\r\n## Configura√ß√£o Inicial\r\n\r\nAp√≥s a instala√ß√£o, inicialize o CAPPY no",
      "category": "testing",
      "keywords": [
        "prevention",
        "task",
        "rule",
        "api",
        "cappy",
        "ia",
        "vsix",
        "vs",
        "xsd",
        "jwt",
        "ai",
        "xml",
        "readme",
        "# compatibilidade com cursor",
        "cursor",
        "compatibility"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "cursor-installation",
      "title": "Instala√ß√£o do CAPPY no Cursor",
      "path": "c:\\Projetos\\cappy\\docs\\CURSOR_INSTALLATION.md",
      "content": "# Instala√ß√£o do CAPPY no Cursor\r\n\r\n## üöÄ Guia R√°pido de Instala√ß√£o\r\n\r\n### M√©todo 1: Instala√ß√£o via VSIX (Recomendado)\r\n\r\n1. **Localize o arquivo VSIX**\r\n   - O arquivo `cappy-2.9.9.vsix` est√° na raiz do projeto\r\n\r\n2. **Instale no Cursor**\r\n   - Abra o Cursor\r\n   - Pressione `Ctrl+Shift+P` (ou `Cmd+Shift+P` no Mac)\r\n   - Digite: `Extensions: Install from VSIX...`\r\n   - Selecione o arquivo `cappy-2.9.9.vsix`\r\n\r\n3. **Confirme a instala√ß√£o**\r\n   - Aguarde a mensagem de confirma√ß√£o\r\n   - Reinicie o Cursor se solicitado\r\n\r\n### M√©todo 2: Via Linha de Comando\r\n\r\n```powershell\r\n# No Windows PowerShell\r\ncursor --install-extension .\\cappy-2.9.9.vsix\r\n```\r\n\r\n```bash\r\n# No Linux/Mac\r\ncursor --install-extension ./cappy-2.9.9.vsix\r\n```\r\n\r\n## ‚úÖ Verifica√ß√£o da Instala√ß√£o\r\n\r\nAp√≥s instalar, verifique se funcionou:\r\n\r\n1. Abra a paleta de comandos (`Ctrl+Shift+P`)\r\n2. Digite \"Cappy\"\r\n3. Voc√™ deve ver todos os comandos dispon√≠veis:\r\n   - ü¶´ Initialize Cappy\r\n   - üß† Cappy: KnowStack\r\n   - üß© Cappy: New Task",
      "category": "testing",
      "keywords": [
        "task",
        "prevention",
        "cappy",
        "vsix",
        "ai",
        "xml",
        "readme",
        "changelog",
        "# instala√ß√£o do cappy no cursor",
        "cursor",
        "installation"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "documentation-update-summary",
      "title": "Documentation Update Summary - Schema Implementation",
      "path": "c:\\Projetos\\cappy\\docs\\DOCUMENTATION_UPDATE_SUMMARY.md",
      "content": "# Documentation Update Summary - Schema Implementation\r\n\r\n> **Date**: 2025-10-03  \r\n> **Task**: TASK_20251003230603 (Contratos de Dados - Schemas)  \r\n> **Status**: ‚úÖ Completed Successfully\r\n\r\n## üìã **Updated Documentation Files**\r\n\r\n### 1. **SPEC.md** - Major Enhancements\r\n- ‚úÖ **Expanded \"Estrutura de Dados\" section** with comprehensive TypeScript interfaces\r\n- ‚úÖ **Added \"Mapeamento LanceDB\" section** with complete SQL schemas for all collections\r\n- ‚úÖ **Added \"Exemplos de Uso dos Schemas\" section** with practical implementation examples\r\n- ‚úÖ **Added \"Valida√ß√£o de Consist√™ncia\" section** validating Mini-LightRAG architecture alignment\r\n\r\n**Key Additions:**\r\n- **Chunk Schema**: 16 fields, flexible vector dimensions (384d/1024d), BLAKE3 hashing\r\n- **Node Schema**: 4 types (Document/Section/Keyword/Symbol), standardized ID formats\r\n- **Edge Schema**: 6 relationship types with hierarchical weights (1.0 ‚Üí 0.2)\r\n- **LanceDB Collections**: Complete SQL schemas with optimized HNSW indices\r\n- **",
      "category": "database",
      "keywords": [
        "task",
        "prevention",
        "rule",
        "database",
        "api",
        "spec",
        "sql",
        "id",
        "hnsw",
        "changelog",
        "create",
        "table",
        "contains",
        "todo",
        "gc",
        "readme",
        "llm",
        "mcp",
        "lm",
        "# documentation update summary - schema implementation"
      ],
      "lastModified": "2025-10-04T02:24:54.662Z",
      "type": "doc"
    },
    {
      "id": "extension-structure",
      "title": "Cappy Extension Structure",
      "path": "c:\\Projetos\\cappy\\docs\\extension-structure.md",
      "content": "# Cappy Extension Structure\r\n\r\n## Overview\r\nCappy 2.9.10+ combines Context Orchestration with Mini-LightRAG hybrid search for intelligent development assistance.\r\n\r\n## Directory Structure\r\n\r\n```\r\nsrc/\r\n‚îú‚îÄ‚îÄ extension.ts              # Main extension entry point\r\n‚îú‚îÄ‚îÄ commands/                 # VS Code command implementations\r\n‚îÇ   ‚îú‚îÄ‚îÄ initCappy.ts         # Project initialization + Mini-LightRAG setup\r\n‚îÇ   ‚îú‚îÄ‚îÄ createTaskFile.ts    # Smart task creation with context discovery\r\n‚îÇ   ‚îú‚îÄ‚îÄ workOnCurrentTask.ts # Context-aware task execution\r\n‚îÇ   ‚îú‚îÄ‚îÄ completeTask.ts      # Learning capture and task finalization\r\n‚îÇ   ‚îú‚îÄ‚îÄ knowStack.ts         # Project architecture analysis\r\n‚îÇ   ‚îú‚îÄ‚îÄ reindexCommand.ts    # Semantic indexing for context discovery\r\n‚îÇ   ‚îú‚îÄ‚îÄ addPreventionRule.ts # Prevention rule management\r\n‚îÇ   ‚îú‚îÄ‚îÄ removePreventionRule.ts\r\n‚îÇ   ‚îú‚îÄ‚îÄ changeTaskStatus.ts  # Task lifecycle management\r\n‚îÇ   ‚îú‚îÄ‚îÄ getActiveTask.ts     # Current task status\r\n‚îÇ   ‚îú‚îÄ‚îÄ getNewTaskInstruction.ts # Task creation guid",
      "category": "testing",
      "keywords": [
        "task",
        "prevention",
        "rule",
        "test",
        "ui",
        "api",
        "database",
        "error",
        "vs",
        "xsd",
        "new",
        "mcp",
        "lm",
        "llm",
        "hnsw",
        "readme",
        "ai",
        "# cappy extension structure",
        "extension",
        "structure"
      ],
      "lastModified": "2025-10-04T02:14:18.955Z",
      "type": "doc"
    },
    {
      "id": "instruction-version-control",
      "title": "Cappy Instructions Version Control",
      "path": "c:\\Projetos\\cappy\\docs\\instruction-version-control.md",
      "content": "# Cappy Instructions Version Control\r\n\r\n## Overview\r\n\r\nThe Cappy extension now supports version-controlled instructions in the `copilot-instructions.md` file. This allows for better management and future updates of the Cappy-specific instructions without affecting other content in the file.\r\n\r\n## How it Works\r\n\r\n### Version Markers\r\n\r\nAll Cappy instructions are wrapped with version-specific markers:\r\n\r\n```\r\n=====================START CAPYBARA MEMORY v1.0.0=====================\r\n# Cappy instructions content here\r\n======================END CAPYBARA MEMORY v1.0.0======================\r\n```\r\n\r\n### Features\r\n\r\n1. **Version Control**: Each instruction block has a version number\r\n2. **Safe Updates**: Old versions are automatically replaced when updating\r\n3. **Content Preservation**: Other content in `copilot-instructions.md` is preserved\r\n4. **English Language**: All instructions are now in English for consistency\r\n\r\n## Available Commands\r\n\r\n### `Cappy: Update Cappy Instructions`\r\n\r\nThis comm",
      "category": "database",
      "keywords": [
        "class",
        "method",
        "task",
        "start",
        "capybara",
        "memory",
        "end",
        "xml",
        "# cappy instructions version control",
        "instruction",
        "version",
        "control"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    },
    {
      "id": "integration-scenarios",
      "title": "Cen√°rios de Integra√ß√£o FORGE",
      "path": "c:\\Projetos\\cappy\\docs\\integration-scenarios.md",
      "content": "# Cen√°rios de Integra√ß√£o FORGE\r\n\r\n## Cen√°rio 1: Projeto Novo (Primeira Instala√ß√£o)\r\n\r\n**Estado inicial**: Sem configura√ß√µes FORGE\r\n\r\n### **Fluxo Autom√°tico**:\r\n1. **Detectar stack** do projeto (package.json, requirements.txt, etc.)\r\n2. **Questionar stack** se n√£o for poss√≠vel detectar automaticamente\r\n3. **Gerar stack-instructions.md** baseado na configura√ß√£o\r\n4. **Criar copilot-instructions.md** referenciando o stack-instructions\r\n5. **Criar forgeConfig.json** com configura√ß√µes do projeto\r\n\r\n**Resultado**:\r\n```\r\n.github/\r\n‚îú‚îÄ‚îÄ copilot-instructions.md (template Cappy + refer√™ncia ao stack)\r\n‚îî‚îÄ‚îÄ stack-instructions.md (configura√ß√µes espec√≠ficas da stack)\r\nsrc/\r\n‚îî‚îÄ‚îÄ forgeConfig.json (configura√ß√£o completa do FORGE)\r\n```\r\n\r\n### **Exemplo: Projeto TypeScript + Express**\r\n**Detec√ß√£o autom√°tica via package.json**:\r\n```json\r\n{\r\n  \"dependencies\": {\r\n    \"express\": \"^4.18.0\",\r\n    \"typescript\": \"^5.0.0\"\r\n  }\r\n}\r\n```\r\n\r\n**LLM**: \"Detectei TypeScript + Express. Configurar Cappy para esta stack? [Y/",
      "category": "testing",
      "keywords": [
        "task",
        "forge",
        "llm",
        "recomendada",
        "php",
        "# cen√°rios de integra√ß√£o forge",
        "integration",
        "scenarios"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    },
    {
      "id": "mini-lightrag-api",
      "title": "Mini-LightRAG API Documentation",
      "path": "c:\\Projetos\\cappy\\docs\\mini-lightrag-api.md",
      "content": "# Mini-LightRAG API Documentation\r\n\r\n## üìã Overview\r\n\r\nThis document provides comprehensive API documentation for integrating with Mini-LightRAG programmatically. It covers TypeScript interfaces, command APIs, configuration options, and extension points.\r\n\r\n---\r\n\r\n## üèóÔ∏è Core Architecture\r\n\r\n### System Components\r\n\r\n```typescript\r\ninterface LightRAGSystem {\r\n  orchestrator: QueryOrchestrator;      // Central coordination\r\n  store: LanceDBStore;                  // Vector storage\r\n  embeddings: EmbeddingService;         // Text to vectors\r\n  chunker: ChunkingService;             // Text segmentation\r\n  graph: LightGraphService;             // Relationship mapping\r\n  indexer: IncrementalIndexer;          // Change detection\r\n  search: HybridSearchService;          // Multi-modal search\r\n  ui: UIManager;                        // Interface management\r\n  performance: PerformanceManager;      // Optimization\r\n}\r\n```\r\n\r\n### Data Models\r\n\r\n```typescript\r\ninterface SearchResult {\r\n  chunk: {\r\n",
      "category": "api",
      "keywords": [
        "api",
        "ui",
        "test",
        "function",
        "class",
        "error",
        "vs",
        "hnsw",
        "ivf",
        "ttl",
        "# mini-lightrag api documentation",
        "mini",
        "lightrag"
      ],
      "lastModified": "2025-10-04T04:57:13.726Z",
      "type": "doc"
    },
    {
      "id": "mini-lightrag-examples",
      "title": "Mini-LightRAG Examples & Tutorials",
      "path": "c:\\Projetos\\cappy\\docs\\mini-lightrag-examples.md",
      "content": "# Mini-LightRAG Examples & Tutorials\r\n\r\n## üìö Table of Contents\r\n1. [Basic Usage Examples](#basic-usage-examples)\r\n2. [Advanced Search Scenarios](#advanced-search-scenarios)\r\n3. [Configuration Examples](#configuration-examples)\r\n4. [Integration Tutorials](#integration-tutorials)\r\n5. [Performance Optimization](#performance-optimization)\r\n6. [Real-World Use Cases](#real-world-use-cases)\r\n\r\n---\r\n\r\n## üöÄ Basic Usage Examples\r\n\r\n### Example 1: Finding Authentication Code\r\n\r\n**Scenario**: You need to understand how user authentication works in your project.\r\n\r\n```typescript\r\n// Search Query: \"user authentication login\"\r\n\r\n// Expected Results:\r\n1. authService.ts (95% match)\r\n   - login(email: string, password: string)\r\n   - authenticateUser()\r\n   - generateToken()\r\n\r\n2. middleware/auth.ts (87% match)\r\n   - verifyToken()\r\n   - requireAuth()\r\n   - checkPermissions()\r\n\r\n3. routes/auth.ts (82% match)\r\n   - POST /api/login\r\n   - POST /api/register\r\n   - GET /api/profile\r\n```\r\n\r\n**Why this works**:",
      "category": "auth",
      "keywords": [
        "auth",
        "api",
        "error",
        "database",
        "class",
        "service",
        "test",
        "prevention",
        "function",
        "ui",
        "bug",
        "component",
        "feature",
        "post",
        "get",
        "http",
        "xss",
        "ram",
        "readme",
        "changelog"
      ],
      "lastModified": "2025-10-04T04:57:13.726Z",
      "type": "doc"
    },
    {
      "id": "mini-lightrag-guide",
      "title": "Mini-LightRAG for VS Code - Complete Guide",
      "path": "c:\\Projetos\\cappy\\docs\\mini-lightrag-guide.md",
      "content": "# Mini-LightRAG for VS Code - Complete Guide\r\n\r\n## üåü Overview\r\n\r\nMini-LightRAG is a lightweight, high-performance semantic search system integrated into VS Code through the Cappy extension. It provides intelligent code discovery, contextual search, and knowledge graph capabilities for your workspace.\r\n\r\n## üöÄ Quick Start\r\n\r\n### Installation & Setup\r\n\r\n1. **Initialize LightRAG in your workspace:**\r\n   ```\r\n   Ctrl+Shift+P ‚Üí \"Initialize LightRAG\"\r\n   ```\r\n\r\n2. **Index your workspace:**\r\n   ```\r\n   Ctrl+Shift+P ‚Üí \"Index Workspace with LightRAG\"\r\n   ```\r\n\r\n3. **Start searching:**\r\n   ```\r\n   Ctrl+Shift+F ‚Üí Enter your search query\r\n   ```\r\n\r\n### First Search\r\n\r\nTry searching for common programming concepts:\r\n- \"authentication logic\"\r\n- \"error handling patterns\"\r\n- \"database connection\"\r\n- \"validation functions\"\r\n\r\n## üîç Search Features\r\n\r\n### Semantic Understanding\r\n\r\nUnlike traditional text search, Mini-LightRAG understands **meaning**:\r\n\r\n```typescript\r\n// Traditional search: exact text ",
      "category": "auth",
      "keywords": [
        "error",
        "database",
        "function",
        "api",
        "method",
        "service",
        "ui",
        "test",
        "auth",
        "vs",
        "hnsw",
        "ai",
        "# mini-lightrag for vs code - complete guide",
        "mini",
        "lightrag",
        "guide"
      ],
      "lastModified": "2025-10-04T04:57:13.726Z",
      "type": "doc"
    },
    {
      "id": "mini-lightrag-integration",
      "title": "Mini-LightRAG Integration Documentation",
      "path": "c:\\Projetos\\cappy\\docs\\mini-lightrag-integration.md",
      "content": "# Mini-LightRAG Integration Documentation\r\n\r\n## Overview\r\nThe Mini-LightRAG system has been successfully integrated into the Cappy VS Code extension, providing semantic search capabilities with hybrid vector-graph retrieval.\r\n\r\n## Available Commands\r\n\r\n### Core Commands\r\n- **`miniRAG.indexWorkspace`** - Index the entire workspace for semantic search\r\n- **`miniRAG.search`** - Perform semantic search with hybrid ranking\r\n- **`miniRAG.openGraph`** - Open graph visualization in webview\r\n\r\n### Optional Commands  \r\n- **`miniRAG.indexFile`** - Index only the current active file\r\n- **`miniRAG.pauseWatcher`** - Pause the file watcher for indexing\r\n\r\n## Configuration Settings\r\n\r\nAll settings are available under the `miniRAG` namespace in VS Code settings:\r\n\r\n### Model Configuration\r\n- **`miniRAG.model`** (string): Model type for embeddings\r\n  - Options: `\"fast\"` | `\"quality\"`\r\n  - Default: `\"fast\"`\r\n\r\n### Search Settings\r\n- **`miniRAG.topK`** (number): Number of top results to return\r\n  - Range:",
      "category": "prevention",
      "keywords": [
        "error",
        "vs",
        "gb",
        "todo",
        "# mini-lightrag integration documentation",
        "mini",
        "lightrag",
        "integration"
      ],
      "lastModified": "2025-10-04T14:50:43.383Z",
      "type": "doc"
    },
    {
      "id": "post-publish-checklist",
      "title": "‚úÖ Checklist P√≥s-Publica√ß√£o - CAPPY v2.9.9",
      "path": "c:\\Projetos\\cappy\\docs\\POST_PUBLISH_CHECKLIST.md",
      "content": "# ‚úÖ Checklist P√≥s-Publica√ß√£o - CAPPY v2.9.9\r\n\r\n## üéâ Publica√ß√£o Conclu√≠da!\r\n\r\n**Data:** 30 de Setembro de 2025\r\n**Vers√£o:** 2.9.9\r\n**Status:** ‚úÖ Publicada com sucesso no VS Code Marketplace\r\n\r\n---\r\n\r\n## üìã Tarefas P√≥s-Publica√ß√£o\r\n\r\n### Imediato (Pr√≥ximas 24h)\r\n\r\n- [ ] **Verificar Marketplace**\r\n  - [ ] Acessar: https://marketplace.visualstudio.com/items?itemName=eduardocecon.cappy\r\n  - [ ] Confirmar que a p√°gina est√° carregando corretamente\r\n  - [ ] Verificar se a descri√ß√£o est√° completa\r\n  - [ ] Confirmar que os badges aparecem (Cursor Compatible)\r\n\r\n- [ ] **Testar Instala√ß√£o**\r\n  - [ ] Instalar no VS Code via marketplace\r\n    ```powershell\r\n    code --install-extension eduardocecon.cappy\r\n    ```\r\n  - [ ] Instalar no Cursor via marketplace\r\n    ```powershell\r\n    cursor --install-extension eduardocecon.cappy\r\n    ```\r\n  - [ ] Verificar mensagem de ativa√ß√£o em ambos editores\r\n  - [ ] Testar comandos principais em ambos\r\n\r\n- [ ] **Criar GitHub Release**\r\n  ```powershell\r\n  gh release c",
      "category": "prevention",
      "keywords": [
        "task",
        "prevention",
        "feature",
        "cappy",
        "vs",
        "changelog",
        "readme",
        "vsce",
        "xsd",
        "url",
        "ia",
        "# ‚úÖ checklist p√≥s-publica√ß√£o - cappy v2.9.9",
        "post",
        "publish",
        "checklist"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "prevention-rules-migration",
      "title": "Migra√ß√£o Prevention Rules: .md ‚Üí .xml",
      "path": "c:\\Projetos\\cappy\\docs\\prevention-rules-migration.md",
      "content": "# Migra√ß√£o Prevention Rules: .md ‚Üí .xml\r\n\r\n## üéØ Resumo das Altera√ß√µes\r\n\r\nMigra√ß√£o completa do sistema de Prevention Rules do formato Markdown (.md) para XML estruturado (.xml), incluindo comandos espec√≠ficos para manipula√ß√£o.\r\n\r\n## üìã Arquivos Modificados\r\n\r\n### ‚úÖ **Templates e Recursos**\r\n- `resources/templates/prevention-rules.xml` ‚Üê **NOVO**\r\n- `resources/templates/cappy-copilot-instructions.md` ‚Üê Atualizado `.md` ‚Üí `.xml`\r\n- `resources/instructions/script-newtask.xml` ‚Üê Atualizado path e refer√™ncias\r\n- `resources/instructions/script-marcar-step-concluido.md` ‚Üê Substitu√≠do por comandos\r\n- `resources/instructions/script-completar-task.md` ‚Üê Substitu√≠do por comandos\r\n\r\n### ‚úÖ **C√≥digo Fonte**  \r\n- `src/commands/initCappy.ts` ‚Üê Cria√ß√£o autom√°tica do XML\r\n- `src/commands/addPreventionRule.ts` ‚Üê **NOVO COMANDO**\r\n- `src/commands/removePreventionRule.ts` ‚Üê **NOVO COMANDO**\r\n- `src/extension.ts` ‚Üê Registro dos novos comandos\r\n- `package.json` ‚Üê Adicionados comandos no manifest\r\n\r\n### ‚úÖ **T",
      "category": "testing",
      "keywords": [
        "prevention",
        "task",
        "test",
        "rule",
        "ui",
        "xml",
        "novo",
        "comando",
        "nova",
        "documenta",
        "readme",
        "utf",
        "id",
        "# migra√ß√£o prevention rules: .md ‚Üí .xml",
        "rules",
        "migration"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    },
    {
      "id": "prevention-rules-system",
      "title": "Prevention Rules System",
      "path": "c:\\Projetos\\cappy\\docs\\prevention-rules-system.md",
      "content": "# Prevention Rules System\r\n\r\n## Vis√£o Geral\r\n\r\nO sistema de Prevention Rules permite armazenar regras que ajudam as LLMs a evitarem erros comuns durante o desenvolvimento. As regras s√£o armazenadas em um arquivo XML estruturado que n√£o deve ser manipulado diretamente pela LLM.\r\n\r\n## Estrutura do Arquivo\r\n\r\nO arquivo `prevention-rules.xml` fica localizado em `.cappy/prevention-rules.xml` e possui a seguinte estrutura:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<prevention-rules count=\"2\">\r\n  <rule id=\"1\">\r\n    <title>Evitar loops infinitos</title>\r\n    <description>Sempre verificar condi√ß√µes de parada em loops</description>\r\n    <category>performance</category>\r\n  </rule>\r\n  <rule id=\"2\">\r\n    <title>Valida√ß√£o de entrada</title>\r\n    <description>Sempre validar dados de entrada do usu√°rio</description>\r\n    <category>security</category>\r\n  </rule>\r\n</prevention-rules>\r\n```\r\n\r\n## Comandos Dispon√≠veis\r\n\r\n### `cappy.addPreventionRule`\r\n- **T√≠tulo**: ‚ûï Cappy: Add Prevention Rule\r\n- ",
      "category": "testing",
      "keywords": [
        "prevention",
        "rule",
        "xml",
        "llm",
        "utf",
        "id",
        "# prevention rules system",
        "rules",
        "system"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    },
    {
      "id": "publish",
      "title": "üöÄ Guia R√°pido: Publicar CAPPY para VS Code e Cursor",
      "path": "c:\\Projetos\\cappy\\docs\\PUBLISH.md",
      "content": "# üöÄ Guia R√°pido: Publicar CAPPY para VS Code e Cursor\r\n\r\n## ‚ö° Resposta R√°pida\r\n\r\n**O Cursor n√£o tem marketplace pr√≥prio!** Ele usa o **Visual Studio Code Marketplace**.\r\n\r\n```\r\nüì¶ Voc√™ publica AQUI ‚Üí VS Code Marketplace\r\n                        ‚Üì\r\n                        ‚îú‚îÄ‚Üí ‚úÖ VS Code (automaticamente)\r\n                        ‚îî‚îÄ‚Üí ‚úÖ Cursor (automaticamente)\r\n```\r\n\r\n## üéØ Uma Publica√ß√£o = Dois Editores\r\n\r\nPublicando no VS Code Marketplace, sua extens√£o fica dispon√≠vel para:\r\n- ‚úÖ **VS Code** - via marketplace nativo\r\n- ‚úÖ **Cursor** - via marketplace do VS Code (que o Cursor usa)\r\n\r\n## üìù Como Publicar (Passo a Passo)\r\n\r\n### 1Ô∏è‚É£ Obter Personal Access Token\r\n\r\n```\r\n1. Acesse: https://dev.azure.com\r\n2. Login com conta Microsoft\r\n3. User Settings > Personal Access Tokens\r\n4. New Token:\r\n   - Name: \"VSCE Token\"\r\n   - Organization: \"All accessible organizations\"\r\n   - Scopes: Marketplace > Manage\r\n5. Copie o token (n√£o ser√° mostrado novamente!)\r\n```\r\n\r\n### 2Ô∏è‚É£ Fazer Login no VSCE\r\n\r\n```powers",
      "category": "auth",
      "keywords": [
        "ui",
        "cappy",
        "vs",
        "aqui",
        "vsce",
        "vsix",
        "changelog",
        "readme",
        "# üöÄ guia r√°pido: publicar cappy para vs code e cursor",
        "publish",
        "post",
        "checklist"
      ],
      "lastModified": "2025-10-04T01:59:14.832Z",
      "type": "doc"
    },
    {
      "id": "publishing-guide",
      "title": "Guia de Publica√ß√£o - VS Code e Cursor",
      "path": "c:\\Projetos\\cappy\\docs\\publishing-guide.md",
      "content": "# Guia de Publica√ß√£o - VS Code e Cursor\r\n\r\n## üéØ Como Funciona\r\n\r\n**Importante**: O Cursor **n√£o tem marketplace pr√≥prio**. Ele usa o **Visual Studio Code Marketplace**!\r\n\r\nIsso significa:\r\n- ‚úÖ Voc√™ publica **uma vez** no VS Code Marketplace\r\n- ‚úÖ A extens√£o fica dispon√≠vel **automaticamente** para Cursor\r\n- ‚úÖ Usu√°rios do Cursor podem instalar via marketplace normal\r\n\r\n## üì¶ Op√ß√µes de Distribui√ß√£o\r\n\r\n### Op√ß√£o 1: Publicar no VS Code Marketplace (Recomendado)\r\n\r\n#### Pr√©-requisitos\r\n\r\n1. **Conta Microsoft/Azure**\r\n   - Necess√°ria para criar um publisher no marketplace\r\n   - Gratuita para desenvolvedores\r\n\r\n2. **Personal Access Token (PAT)**\r\n   - Token de acesso para publica√ß√£o\r\n   - Criado no Azure DevOps\r\n\r\n3. **Tag de descoberta no Marketplace**\r\n   - Para aparecer no filtro `@tag:language-model-tools`\r\n   - Garanta que `package.json` contenha o keyword `\"language-model-tools\"`\r\n   - Ajuda a destacar a extens√£o entre as ferramentas de Language Model\r\n\r\n4. **Publisher Verificado**\r\n   ",
      "category": "auth",
      "keywords": [
        "ui",
        "test",
        "api",
        "vs",
        "pat",
        "vsce",
        "vsix",
        "cappy",
        "changelog",
        "cli",
        "ok",
        "nunca",
        "readme",
        "# guia de publica√ß√£o - vs code e cursor",
        "publishing",
        "guide"
      ],
      "lastModified": "2025-10-04T06:44:00.439Z",
      "type": "doc"
    },
    {
      "id": "reindex-command",
      "title": "Reindex Command Documentation",
      "path": "c:\\Projetos\\cappy\\docs\\reindex-command.md",
      "content": "# Reindex Command Documentation\r\n\r\n## Overview\r\n\r\nThe `cappy.reindex` command rebuilds semantic indexes for all files in the workspace, including tasks, documentation, and prevention rules. This command leverages VS Code's native APIs for efficient file processing and symbol extraction.\r\n\r\n## Purpose\r\n\r\nThe reindex command maintains up-to-date semantic indexes that enable:\r\n- Fast context discovery during task creation\r\n- Efficient search across documentation and prevention rules\r\n- Automated relationship mapping between tasks and related content\r\n- Better performance in context orchestration\r\n\r\n## Functionality\r\n\r\n### What Gets Indexed\r\n\r\n1. **Tasks** (`/cappy/tasks/` and `.cappy/history/`)\r\n   - Active and completed task XML files\r\n   - Extracts task metadata (ID, title, category, keywords)\r\n   - Analyzes task content for semantic context\r\n\r\n2. **Documentation** (`docs/` directory)\r\n   - Markdown and text files containing project documentation\r\n   - Extracts titles, categories, and k",
      "category": "database",
      "keywords": [
        "prevention",
        "task",
        "rule",
        "auth",
        "database",
        "api",
        "ui",
        "error",
        "test",
        "vs",
        "xml",
        "id",
        "json",
        "iso",
        "# reindex command documentation",
        "reindex",
        "command"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    },
    {
      "id": "simplification-summary",
      "title": "simplification-summary",
      "path": "c:\\Projetos\\cappy\\docs\\simplification-summary.md",
      "content": "",
      "category": "general",
      "keywords": [
        "simplification",
        "summary"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    },
    {
      "id": "step-10-documentation-examples",
      "title": "Step 10 - Documentation & Examples - Implementation Summary",
      "path": "c:\\Projetos\\cappy\\docs\\step-10-documentation-examples.md",
      "content": "# Step 10 - Documentation & Examples - Implementation Summary\r\n\r\n## üéØ Overview\r\n\r\nStep 10 completed the Mini-LightRAG system with comprehensive documentation, practical examples, API reference, and test suites. This final step ensures users can effectively utilize all system features.\r\n\r\n## üìö Documentation Created\r\n\r\n### 1. Complete User Guide\r\n**File**: `docs/mini-lightrag-guide.md`\r\n- **Size**: 15,000+ lines of comprehensive documentation\r\n- **Sections**: \r\n  - Quick Start guide with installation and first search\r\n  - Advanced search features with semantic understanding\r\n  - UI integration (status bar, results panel, context menu)\r\n  - Performance optimization and configuration\r\n  - Troubleshooting and best practices\r\n  - Privacy and security information\r\n\r\n**Key Features Documented**:\r\n- Semantic search capabilities vs traditional text search\r\n- Context-aware results using cursor position\r\n- Smart query types (concept, implementation, pattern queries)\r\n- Performance metrics and sc",
      "category": "auth",
      "keywords": [
        "api",
        "test",
        "ui",
        "bug",
        "error",
        "feature",
        "vs",
        "ide",
        "# step 10 - documentation & examples - implementation summary",
        "step",
        "documentation",
        "examples"
      ],
      "lastModified": "2025-10-04T04:57:13.726Z",
      "type": "doc"
    },
    {
      "id": "step-4-incremental-indexing-completed",
      "title": "Step 4 - Incremental Indexing ‚úÖ",
      "path": "c:\\Projetos\\cappy\\docs\\step-4-incremental-indexing-completed.md",
      "content": "# Step 4 - Incremental Indexing ‚úÖ\r\n\r\n## Implementa√ß√£o Conclu√≠da\r\n\r\n‚úÖ **IncrementalIndexer Service** - Sistema completo de indexa√ß√£o incremental  \r\n‚úÖ **Change Detection** - Detec√ß√£o de mudan√ßas baseada em BLAKE3 hashing  \r\n‚úÖ **Batch Processing** - Processamento em lotes para performance  \r\n‚úÖ **File Discovery** - Sistema de descoberta com filtros include/exclude  \r\n‚úÖ **Content Normalization** - Normaliza√ß√£o consistente para hashing  \r\n‚úÖ **Statistics Tracking** - M√©tricas detalhadas de indexa√ß√£o  \r\n‚úÖ **Test Suite** - Teste manual completo e funcionando  \r\n\r\n## Principais Funcionalidades\r\n\r\n### 1. Sistema de Detec√ß√£o de Mudan√ßas\r\n```typescript\r\ninterface ChangeDetectionResult {\r\n  fileChanged: boolean;\r\n  modifiedChunks: string[];\r\n  removedChunks: string[];\r\n  addedChunks: string[];\r\n  oldFileHash?: string;\r\n  newFileHash: string;\r\n}\r\n```\r\n\r\n### 2. Normaliza√ß√£o de Conte√∫do\r\n- **Line endings**: Normaliza√ß√£o LF (`\\n`)\r\n- **Trailing whitespace**: Remo√ß√£o autom√°tica\r\n- **Unicode**: Normaliza√ß",
      "category": "prevention",
      "keywords": [
        "service",
        "test",
        "error",
        "lf",
        "nfc",
        "vs",
        "conclu",
        "do",
        "# step 4 - incremental indexing ‚úÖ",
        "step",
        "incremental",
        "indexing",
        "completed"
      ],
      "lastModified": "2025-10-04T03:40:44.814Z",
      "type": "doc"
    },
    {
      "id": "step-6-query-orchestrator",
      "title": "Step 6 - Query Orchestrator Implementation ‚úÖ",
      "path": "c:\\Projetos\\cappy\\docs\\step-6-query-orchestrator.md",
      "content": "# Step 6 - Query Orchestrator Implementation ‚úÖ\r\n\r\n## üìã Overview\r\n\r\nO **QueryOrchestrator** √© o c√©rebro central do sistema Mini-LightRAG, coordenando todas as opera√ß√µes entre os diferentes componentes e oferecendo uma interface unificada para o VS Code.\r\n\r\n## üèóÔ∏è Architecture\r\n\r\n### Core Components Integration\r\n\r\n```\r\nQueryOrchestrator\r\n‚îú‚îÄ‚îÄ LanceDBStore (vector storage)\r\n‚îú‚îÄ‚îÄ EmbeddingService (miniLM-L6-v2)\r\n‚îú‚îÄ‚îÄ ChunkingService (semantic chunks)\r\n‚îú‚îÄ‚îÄ LightGraphService (graph relationships)\r\n‚îú‚îÄ‚îÄ IncrementalIndexer (change detection)\r\n‚îî‚îÄ‚îÄ HybridSearchPipeline (multi-modal search)\r\n```\r\n\r\n### Key Interfaces\r\n\r\n#### MiniLightRAGConfig\r\n```typescript\r\ninterface MiniLightRAGConfig {\r\n  database: DatabaseConfig;     // LanceDB settings\r\n  indexing: IndexingConfig;     // Auto-indexing behavior\r\n  search: SearchConfig;         // Search parameters\r\n}\r\n```\r\n\r\n#### SearchContext\r\n```typescript\r\ninterface SearchContext {\r\n  workspacePath?: string;\r\n  cursorContext?: {\r\n    line: number;\r\n    chara",
      "category": "testing",
      "keywords": [
        "database",
        "function",
        "test",
        "service",
        "class",
        "error",
        "component",
        "api",
        "vs",
        "ttl",
        "completed",
        "# step 6 - query orchestrator implementation ‚úÖ",
        "step",
        "query",
        "orchestrator"
      ],
      "lastModified": "2025-10-04T03:58:44.396Z",
      "type": "doc"
    },
    {
      "id": "step-7-vscode-commands",
      "title": "Step 7 - VS Code Commands Integration ‚úÖ",
      "path": "c:\\Projetos\\cappy\\docs\\step-7-vscode-commands.md",
      "content": "# Step 7 - VS Code Commands Integration ‚úÖ\r\n\r\n## üìã Overview\r\n\r\nO **Step 7** implementa a integra√ß√£o completa dos comandos LightRAG com a interface do VS Code, oferecendo uma experi√™ncia de usu√°rio rica e intuitiva para pesquisa sem√¢ntica no workspace.\r\n\r\n## üéØ Architecture Overview\r\n\r\n### Command Structure\r\n```\r\nVS Code Commands Integration\r\n‚îú‚îÄ‚îÄ LightRAGSearchCommand (core functionality)\r\n‚îú‚îÄ‚îÄ registerLightRAGCommands (command registry)\r\n‚îú‚îÄ‚îÄ OutputWriter (UI feedback)\r\n‚îî‚îÄ‚îÄ Extension Integration (main activation)\r\n```\r\n\r\n### User Interface Components\r\n- **Command Palette**: Acesso direto via `Ctrl+Shift+P`\r\n- **Status Bar**: Indicador visual do estado do LightRAG\r\n- **Output Channel**: Log detalhado das opera√ß√µes\r\n- **Quick Pick**: Sele√ß√£o interativa de resultados\r\n- **Context Menu**: Busca por texto selecionado\r\n- **Keyboard Shortcuts**: Atalhos r√°pidos para fun√ß√µes principais\r\n\r\n## üîß Implementation Files\r\n\r\n### 1. LightRAGSearchCommand (`src/commands/lightragSearch.ts`)\r\n**Responsabil",
      "category": "testing",
      "keywords": [
        "ui",
        "database",
        "error",
        "function",
        "test",
        "api",
        "vs",
        "hnsw",
        "ttl",
        "completed",
        "# step 7 - vs code commands integration ‚úÖ",
        "step",
        "vscode",
        "commands"
      ],
      "lastModified": "2025-10-04T04:08:25.179Z",
      "type": "doc"
    },
    {
      "id": "step-8-ui-enhancements",
      "title": "Step 8 - User Interface Enhancements ‚úÖ",
      "path": "c:\\Projetos\\cappy\\docs\\step-8-ui-enhancements.md",
      "content": "# Step 8 - User Interface Enhancements ‚úÖ\r\n\r\n## üìã Overview\r\n\r\nO **Step 8** implementa melhorias avan√ßadas na interface do usu√°rio, criando uma experi√™ncia rica e intuitiva para intera√ß√£o com o sistema LightRAG no VS Code.\r\n\r\n## üé® UI Architecture\r\n\r\n### Component Hierarchy\r\n```\r\nLightRAGUIManager (coordinator)\r\n‚îú‚îÄ‚îÄ LightRAGStatusBar (status indication)\r\n‚îú‚îÄ‚îÄ LightRAGResultsPanel (webview results)\r\n‚îú‚îÄ‚îÄ LightRAGQuickPick (enhanced search)\r\n‚îú‚îÄ‚îÄ LightRAGProgressManager (progress feedback)\r\n‚îú‚îÄ‚îÄ LightRAGNotifications (toast messages)\r\n‚îî‚îÄ‚îÄ LightRAGHoverProvider (contextual tooltips)\r\n```\r\n\r\n## üîß Implementation Details\r\n\r\n### 1. Status Bar Enhancement (`src/ui/statusBar.ts`)\r\n**Advanced status indication with real-time updates**\r\n\r\n#### Features:\r\n- **Real-time Status**: Live updates during indexing operations\r\n- **Progress Indicators**: Visual progress with percentage completion\r\n- **Smart Tooltips**: Rich hover information with system stats\r\n- **Quick Actions**: Click-to-action functionality",
      "category": "ui",
      "keywords": [
        "ui",
        "component",
        "database",
        "error",
        "function",
        "test",
        "vs",
        "html",
        "css",
        "js",
        "json",
        "aria",
        "completed",
        "wcag",
        "aa",
        "# step 8 - user interface enhancements ‚úÖ",
        "step",
        "enhancements"
      ],
      "lastModified": "2025-10-04T04:37:19.127Z",
      "type": "doc"
    },
    {
      "id": "step-9-performance-optimization",
      "title": "Step 9 - Performance Optimization ‚úÖ",
      "path": "c:\\Projetos\\cappy\\docs\\step-9-performance-optimization.md",
      "content": "# Step 9 - Performance Optimization ‚úÖ\r\n\r\n## üìã Overview\r\n\r\nO **Step 9** implementa um sistema abrangente de otimiza√ß√£o de performance para o LightRAG, garantindo opera√ß√£o eficiente mesmo com grandes workspaces e datasets extensos.\r\n\r\n## ‚ö° Performance Architecture\r\n\r\n### System Components\r\n```\r\nPerformanceManager (coordinator)\r\n‚îú‚îÄ‚îÄ PerformanceMonitor (metrics & alerts)\r\n‚îú‚îÄ‚îÄ LightRAGCache (multi-level caching)\r\n‚îú‚îÄ‚îÄ MemoryOptimizer (memory management)\r\n‚îú‚îÄ‚îÄ BatchProcessor (bulk operations)\r\n‚îî‚îÄ‚îÄ ResourcePool (object reuse)\r\n```\r\n\r\n## üîß Implementation Details\r\n\r\n### 1. Performance Monitor (`src/performance/monitor.ts`)\r\n**Comprehensive performance tracking and alerting system**\r\n\r\n#### Features:\r\n- **Operation Timing**: Precise measurement of all operations with high-resolution timers\r\n- **Memory Tracking**: Real-time memory usage monitoring with delta calculations\r\n- **Statistical Analysis**: P95, P99, median, and average metrics for all operations\r\n- **Performance Alerts**: Automatic dete",
      "category": "testing",
      "keywords": [
        "database",
        "test",
        "ttl",
        "lru",
        "gc",
        "completed",
        "# step 9 - performance optimization ‚úÖ",
        "step",
        "performance",
        "optimization"
      ],
      "lastModified": "2025-10-04T04:44:51.613Z",
      "type": "doc"
    },
    {
      "id": "step-timestamp-generation",
      "title": "Exemplo: Gera√ß√£o Autom√°tica de STEP IDs com Unix Timestamp",
      "path": "c:\\Projetos\\cappy\\docs\\step-timestamp-generation.md",
      "content": "# Exemplo: Gera√ß√£o Autom√°tica de STEP IDs com Unix Timestamp\r\n\r\n## Como a LLM deve gerar os IDs automaticamente:\r\n\r\n```javascript\r\n// Timestamp base (simulando Date.now())\r\nconst baseTimestamp = 1722873600; // 4 de Agosto, 2025\r\n\r\n// Gera√ß√£o autom√°tica de steps para uma task:\r\nconst steps = [\r\n    {\r\n        id: `STEP_${baseTimestamp}`,        // STEP_1722873600\r\n        title: \"Install dependencies\"\r\n    },\r\n    {\r\n        id: `STEP_${baseTimestamp + 60}`,   // STEP_1722873660  \r\n        title: \"Configure environment\"\r\n    },\r\n    {\r\n        id: `STEP_${baseTimestamp + 120}`,  // STEP_1722873720\r\n        title: \"Create client configuration\"\r\n    },\r\n    {\r\n        id: `STEP_${baseTimestamp + 180}`,  // STEP_1722873780\r\n        title: \"Setup authentication\"\r\n    },\r\n    {\r\n        id: `STEP_${baseTimestamp + 240}`,  // STEP_1722873840\r\n        title: \"Create custom hook\"\r\n    }\r\n];\r\n```\r\n\r\n## Vantagens do sistema:\r\n\r\n‚úÖ **Ordem cronol√≥gica autom√°tica**: Steps sempre ficam em ordem tempo",
      "category": "auth",
      "keywords": [
        "task",
        "step",
        "llm",
        "jwt",
        "# exemplo: gera√ß√£o autom√°tica de step ids com unix timestamp",
        "timestamp",
        "generation"
      ],
      "lastModified": "2025-10-04T01:59:14.843Z",
      "type": "doc"
    }
  ],
  "lastUpdated": "2025-10-04T14:51:23.270Z"
}