<?xml version="1.0" encoding="UTF-8"?>
<task id="TASK_20251003102110"
    category="architecture"
    priority="normal"
    status="pending"
    created="2025-10-03T13:21:10.865Z"
    completedAt=""
    xmlns="https://cappy-methodology.dev/task/1.0">

    <about>
        <summary>
            Implementar estrutura inicial do Mini-LightRAG na extensão VS Code Cappy. 
            Criar diretórios, definir decisões arquiteturais e documentar especificações 
            para sistema de busca híbrida com LanceDB e LightGraph.
        </summary>
    </about>

    <context>
        <description>
            Construir estrutura inicial para um mini-LightRAG 100% local dentro da extensão VS Code atual, 
            unindo LanceDB (vetorial) e LightGraph (grafo leve) com recuperação híbrida e UI de grafo em Webview.
            
            OBJETIVO: Criar base arquitetural para busca precisa em símbolos/docs com abertura direta no arquivo/linha,
            subgrafo explicando "por que apareceu" e indexação incremental rápida.
            
            TECNOLOGIAS DEFINIDAS:
            - LanceDB in-process (globalStorage da extensão)
            - LightGraph integrado no próprio LanceDB 
            - all-MiniLM-L6-v2 (transformers.js) para embeddings
            - BLAKE3 para hashing de chunks
            - React para UI do webview
            
            ENTREGÁVEIS:
            - Estrutura de diretórios organizada
            - Arquivo SPEC.md com decisões documentadas
            - Integração no cappy.init para criar estrutura automaticamente
        </description>
        <keywords>
            <keyword>mini-lightrag</keyword>
            <keyword>lancedb</keyword>
            <keyword>lightgraph</keyword>
            <keyword>embedding</keyword>
            <keyword>vectorial-search</keyword>
            <keyword>graph-retrieval</keyword>
            <keyword>webview-react</keyword>
            <keyword>vscode-extension</keyword>
        </keywords>

        <docs_refs>
            <doc path=".cappy/stack.md" relevance="critical">Stack knowledge base da extensão</doc>
            <doc path=".cappy/TODO/step_02.md" relevance="high">Decisões arquiteturais e estrutura</doc>
            <doc path="src/extension.ts" relevance="medium">Entry point da extensão</doc>
            <doc path="src/commands/initCappy.ts" relevance="high">Comando de inicialização</doc>
        </docs_refs>

        <prevention_rules>
            <rule id="directory-structure" category="architecture" severity="high" auto_apply="true">
                Manter estrutura de diretórios organizada e seguir convenções do projeto
            </rule>
            <rule id="spec-documentation" category="architecture" severity="medium" auto_apply="true">
                Documentar decisões arquiteturais no SPEC.md de forma clara e detalhada
            </rule>
            <rule id="cappy-integration" category="architecture" severity="high" auto_apply="true">
                Integrar criação de estrutura no comando cappy.init existente sem quebrar funcionalidade atual
            </rule>
            <rule id="scope-validation" category="general" severity="high" auto_apply="true">
                Manter tarefa atômica - máximo 5 steps principais
            </rule>
        </prevention_rules>

        <related_tasks>
            <task id="future" description="Implementação do indexer e store LanceDB"/>
            <task id="future" description="Desenvolvimento da UI React do webview"/>
        </related_tasks>

        <dependencies>
            <dependency type="environment" critical="true">VS Code Extension Development Environment</dependency>
            <dependency type="tool" critical="true">TypeScript</dependency>
            <dependency type="file" critical="true">src/commands/initCappy.ts</dependency>
        </dependencies>
    </context>

    <execution>
        <step id="1" name="Verificar compatibilidade de dependências">
            <checklist>
                <item>Verificar compatibilidade do LanceDB com ambiente Node.js de extensão VS Code</item>
                <item>Verificar tamanho e compatibilidade do transformers.js</item>
                <item>Verificar se BLAKE3 tem implementação para Node.js</item>
                <item>Documentar alternativas caso alguma dependência não seja viável</item>
                <item>Marcar este step como concluído</item>
            </checklist>
        </step>

        <step id="2" name="Criar estrutura de diretórios com propósito específico">
            <checklist>
                <item>Criar pasta src/core/ - Contratos de dados (schemas), ranking, chunking, hashing (Step 3-5)</item>
                <item>Criar pasta src/indexer/ - Ingestão e atualização incremental de documentos (Step 8)</item>
                <item>Criar pasta src/store/ - LanceDB: persistência de chunks, nodes, edges (Step 6-7)</item>
                <item>Criar pasta src/graph/ - Consulta/expansão 1-hop, construção de subgrafo (Step 7)</item>
                <item>Criar pasta src/query/ - Orquestração de busca híbrida e fusão de ranking (Step 9)</item>
                <item>Criar pasta src/tools/ - MCP/LMTools: rag.search, graph.expand, cite.open, symbols.lookup (Step 12)</item>
                <item>Criar pasta src/webview/graph-ui/ - React + Cytoscape.js para UI de grafo (Step 11)</item>
                <item>Verificar se todas as pastas foram criadas corretamente</item>
                <item>Marcar este step como concluído</item>
            </checklist>
        </step>

        <step id="3" name="Criar READMEs explicativos para cada pasta">
            <checklist>
                <item>Criar src/core/README.md explicando schemas, chunking e hashing</item>
                <item>Criar src/indexer/README.md explicando indexação incremental</item>
                <item>Criar src/store/README.md explicando persistência LanceDB</item>
                <item>Criar src/graph/README.md explicando expansão de grafo</item>
                <item>Criar src/query/README.md explicando orquestração de busca híbrida</item>
                <item>Criar src/tools/README.md explicando ferramentas MCP/LMTools</item>
                <item>Criar src/webview/graph-ui/README.md explicando UI React do grafo</item>
                <item>Marcar este step como concluído</item>
            </checklist>
        </step>

        <step id="4" name="Criar arquivo SPEC.md com decisões arquiteturais">
            <checklist>
                <item>Criar arquivo SPEC.md na raiz do projeto</item>
                <item>Documentar decisões de armazenamento vetorial (LanceDB in-process)</item>
                <item>Documentar estratégia de grafo (LightGraph no próprio LanceDB)</item>
                <item>Documentar modelos de embedding (all-MiniLM-L6-v2, transformers.js)</item>
                <item>Documentar sistema de hash (BLAKE3 por chunk)</item>
                <item>Documentar fonte de docs (JSDoc/TypeDoc JSON, .md)</item>
                <item>Incluir mapeamento da estrutura de diretórios e propósito de cada um</item>
                <item>Definir exemplo concreto de globalStorage usando vscode.ExtensionContext</item>
                <item>Marcar este step como concluído</item>
            </checklist>
        </step>

        <step id="5" name="Integrar no comando cappy.init com backup">
            <checklist>
                <item>Criar backup do src/commands/initCappy.ts original</item>
                <item>Analisar código atual do initCappy para entender fluxo</item>
                <item>Adicionar criação da estrutura Mini-LightRAG no comando init</item>
                <item>Criar verificação se estrutura já existe antes de criar</item>
                <item>Adicionar logs informativos sobre a criação da estrutura</item>
                <item>Testar comando cappy.init para verificar se não quebrou funcionalidade existente</item>
                <item>Validar que backup pode ser restaurado se necessário</item>
                <item>Marcar este step como concluído</item>
            </checklist>
        </step>
    </execution>

    <!-- Completion section é preenchida apenas após execução -->
    <!-- Exemplo
    <completion>
        <validation_checklist>
            <item>stack.md existe e não vazio</item>
            <item>sem task ativa</item>
            <item>XML criado, contexto preenchido, steps e checklists definidos.</item>
        </validation_checklist>
    </completion>
    -->
</task>