const vscode = require('vscode');

// Mock para teste fora do VS Code
if (typeof vscode === 'undefined' || !vscode.commands) {
    console.log('‚ùå Este script deve ser executado dentro do VS Code');
    console.log('üí° Para testar:');
    console.log('1. Abra o VS Code: code .');
    console.log('2. Abra o terminal integrado (Ctrl+`)');
    console.log('3. Execute: node test-cappy-api-direct.js');
    process.exit(1);
}

async function testCappyAPI() {
    console.log('ü¶´ Testando API Cappy diretamente...\n');
    
    try {
        // Teste 1: Verificar se a extens√£o est√° ativa
        console.log('1Ô∏è‚É£ Verificando extens√£o...');
        const extension = vscode.extensions.getExtension('eduardocecon.cappy');
        
        if (!extension) {
            console.log('‚ùå Extens√£o n√£o encontrada');
            return;
        }
        
        console.log(`‚úÖ Extens√£o encontrada: ${extension.id}`);
        console.log(`üì¶ Vers√£o: ${extension.packageJSON.version}`);
        console.log(`üîÑ Ativa: ${extension.isActive}`);
        
        if (!extension.isActive) {
            console.log('üöÄ Ativando extens√£o...');
            await extension.activate();
        }
        
        // Teste 2: Testar comando cappy.version
        console.log('\n2Ô∏è‚É£ Testando cappy.version...');
        const version = await vscode.commands.executeCommand('cappy.version');
        console.log(`‚úÖ Vers√£o retornada: "${version}"`);
        
        // Verificar se output.txt foi criado
        setTimeout(() => {
            const fs = require('fs');
            const path = require('path');
            
            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
            if (workspaceFolder) {
                const outputPath = path.join(workspaceFolder.uri.fsPath, '.cappy', 'output.txt');
                
                if (fs.existsSync(outputPath)) {
                    const content = fs.readFileSync(outputPath, 'utf8');
                    console.log(`‚úÖ output.txt criado com conte√∫do: "${content}"`);
                } else {
                    console.log('‚ùå output.txt n√£o foi criado');
                }
            }
        }, 500);
        
        // Teste 3: Testar outros comandos
        const commandsToTest = [
            'cappy.init',
            'cappy.knowstack',
            'cappy.new'
        ];
        
        for (const cmd of commandsToTest) {
            console.log(`\n3Ô∏è‚É£ Testando ${cmd}...`);
            try {
                const result = await vscode.commands.executeCommand(cmd);
                console.log(`‚úÖ ${cmd} executado: ${result ? 'com retorno' : 'sem retorno'}`);
            } catch (error) {
                console.log(`‚ùå Erro em ${cmd}: ${error.message}`);
            }
        }
        
        console.log('\nüéâ Teste conclu√≠do!');
        
    } catch (error) {
        console.log(`üí• Erro geral: ${error.message}`);
    }
}

// Executar o teste
testCappyAPI();